dependencies {
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.MindustryJitpack:core:$mindustryVersion"

    implementation project(":core")

    compileOnly project(":annotations")
    annotationProcessor project(":annotations")
}

ext {
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT") ?: rootProject.ext.localProperties.get("sdkroot")
}

tasks.named("jar").configure {
    doLast{
        var useandroid = rootProject.ext.localProperties.get("useandroid")
        println "Use android ${useandroid == null || useandroid == true}."
        if (useandroid == null || useandroid == true) {
            if (!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

            def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

            if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

            //collect dependencies needed for desugaring
            def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

            //dex and desugar files - this requires d8 in your PATH
            "d8 $dependencies --min-api 16 --output ${rootProject.ext.getOutputJar(project)} ${rootProject.ext.getOutputJar(project(":core"))}"
                    .execute(null, rootProject.file("artifacts")).waitForProcessOutput(System.out, System.err)
        }
    }
}