import java.util.regex.Pattern

dependencies {
    if (rootProject.ext.dependenciesC.containsKey(project))
        rootProject.ext.dependenciesC.get(project).split(";").each { String dep ->
            compileOnly rootProject.ext.dependencies.get(dep)
        }
    if (rootProject.ext.dependenciesI.containsKey(project))
        rootProject.ext.dependenciesI.get(project).split(";").each { String dep ->
            implementation rootProject.ext.dependencies.get(dep)
        }
    if (rootProject.ext.dependenciesA.containsKey(project))
        rootProject.ext.dependenciesA.get(project).split(";").each { String dep ->
            annotationProcessor rootProject.ext.dependencies.get(dep)
        }

    implementation project(":core")

    compileOnly project(":annotations")
    annotationProcessor project(":annotations")
}

ext {
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT") ?: rootProject.ext.localProperties.get("sdkroot")
    dexFile = new File(project.buildDir, "dex-${rootProject.ext.getOutputJar(project)}")
    useandroid = rootProject.ext.localProperties.get("useandroid")
}

project.tasks.create("createFinalJar", Jar) {
    archiveFileName = "temp.jar"
    from {
        [
                zipTree(project.tasks.jar.archiveFile.get()),
                zipTree(dexFile)
        ]
    }
    doLast {
        delete project.tasks.jar.archiveFile.get()
        copy {
            from archiveFile.get()
            into project.tasks.jar.destinationDirectory
            rename { name ->
                println project.tasks.jar.archiveFile.get()
                println project.tasks.jar.destinationDirectory.get()
                println project.tasks.jar.archiveFileName.get()
                project.tasks.jar.archiveFileName.get()
            }
        }
    }

    finalizedBy project.tasks.copyJar
}

task dex {
    doLast{
        if (!sdkRoot || !new File(sdkRoot).exists())
            throw new GradleException("No valid Android SDK found.")
        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find {
            f -> new File(f, "android.jar").exists()
        }
        if (!platformRoot)
            throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        var classpath = (configurations.compileClasspath.asList()
                + configurations.runtimeClasspath.asList()
                + [new File(platformRoot, "android.jar")])
        var dependencies = ""
        for(def path : classpath){
            dependencies += "--classpath $path.path "
        }

        String executableName = System.getenv("OS") == "Windows_NT" ? "d8.bat" : "d8"

        def buildToolsRoot = new File("$sdkRoot/build-tools/").listFiles().sort().reverse().find {
            f -> new File(f, executableName).exists()
        }
        if (!buildToolsRoot)
            throw new GradleException("No $executableName found. Ensure that you have an Android build tools installed.")
        "$buildToolsRoot/$executableName $dependencies ${project.tasks.jar.archiveFile.get()} --min-api 14 --output $dexFile.absolutePath"
                 .execute(null, projectDir).waitForProcessOutput(System.out, System.err)
    }

    finalizedBy project.tasks.createFinalJar
}

project.tasks.named("jar").configure {
    println "Build android dex: ${useandroid == null || useandroid.equalsIgnoreCase("true")}."
    if (useandroid == null || useandroid.equalsIgnoreCase("true")) {
        finalizedBy project.tasks.dex
    }
}
