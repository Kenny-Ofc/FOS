dependencies {
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.MindustryJitpack:core:$mindustryVersion"

    implementation project(":core")

    compileOnly project(":annotations")
    annotationProcessor project(":annotations")
}

ext {
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT") ?: rootProject.ext.localProperties.get("sdkroot")
    jarFile = tasks.jar.archiveFile.get().asFile
    dexFile = new File(jarFile.parent, "raw-${rootProject.ext.getOutputJar(project)}")
}

tasks.create("dex") {
    doLast{
        var useandroid = rootProject.ext.localProperties.get("useandroid")
        println "Use android ${useandroid == null || useandroid == true}."
        if (useandroid == null || useandroid == true) {
            if (!sdkRoot || !new File(sdkRoot).exists())
                throw new GradleException("No valid Android SDK found.")
            def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find {
                f -> new File(f, "android.jar").exists()
            }
            if (!platformRoot)
                throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

            var classpath = (configurations.compileClasspath.asList()
                    + configurations.runtimeClasspath.asList()
                    + [new File(platformRoot, "android.jar")])
            var dependencies = ""
            for(def path : classpath){
                dependencies += "--classpath "
                dependencies += path.path + " "
            }

            println dexFile.absolutePath
            println jarFile.absolutePath
            "d8 $dependencies --min-api 14 --output ${dexFile}"
                    .execute(null, projectDir).waitForProcessOutput(System.out, System.err)
        }
    }
}

tasks.named("compileJava").configure {
    dependsOn tasks.dex
}

tasks.named("jar").configure {
    from {
        zipTree(dexFile)
    }
}